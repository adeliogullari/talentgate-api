services:
  postgres:
    container_name: postgres
    image: postgres:18.0-alpine
    restart: always
    healthcheck:
      test: >
        bash -c "pg_isready -q -d ${POSTGRES_DB} -U ${POSTGRES_USER}"
      interval: 10s
      retries: 10
      start_period: 10s
      timeout: 10s
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/18/docker
    networks:
      - talentgate-api-net
    profiles:
      - dev
      - prod

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:9.9.0
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "8080:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - talentgate-api-net
    profiles:
      - dev

  redis:
    container_name: redis
    image: redis:8.2-alpine
    restart: always
    healthcheck:
      test: sh -c "redis-cli -u redis://${REDIS_USERNAME}:${REDIS_PASSWORD}@localhost:6379 ping | grep -q PONG"
      interval: 10s
      retries: 10
      start_period: 10s
      timeout: 10s
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: >
      sh -c "
      echo 'user default off' > /tmp/users.acl &&
      echo 'user ${REDIS_USERNAME} on >${REDIS_PASSWORD} allcommands allkeys' >> /tmp/users.acl &&
      redis-server --aclfile /tmp/users.acl \
        --save \"\" \
        --appendonly no \
        --maxmemory 256mb \
        --maxmemory-policy allkeys-lru \
        --lazyfree-lazy-eviction yes \
        --lazyfree-lazy-expire yes \
        --lazyfree-lazy-server-del yes \
        --tcp-keepalive 60 \
        --timeout 0 \
        --databases 1 \
        --protected-mode yes"
    networks:
      - talentgate-api-net
    profiles:
      - dev
      - prod

  redisinsight:
    container_name: redisinsight
    image: redis/redisinsight:2.70.1
    depends_on:
      redis:
        condition: service_healthy
    restart: always
    environment:
      RI_REDIS_HOST: redis
      RI_REDIS_PORT: ${REDIS_PORT}
      RI_REDIS_ALIAS: talentgate
      RI_REDIS_USERNAME: ${REDIS_USERNAME}
      RI_REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "5540:5540"
    volumes:
      - redisinsight_data:/data
    networks:
      - talentgate-api-net
    profiles:
      - dev

  minio:
    container_name: minio
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z-cpuv1
    restart: always
    healthcheck:
      test: >
        bash -c "curl -f http://localhost:9000/minio/health/live"
      interval: 10s
      retries: 10
      start_period: 10s
      timeout: 10s
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio-data:/data
    command: server /data
    networks:
      - talentgate-api-net
    profiles:
      - dev
      - prod

  minio-init:
    container_name: minio-init
    image: minio/mc:RELEASE.2025-08-13T08-35-41Z-cpuv1
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
    entrypoint: >
      /bin/sh -c "
        mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};

        mc ls myminio/profile || mc mb myminio/profile;
        mc ls myminio/logo || mc mb myminio/logo;
        mc ls myminio/resume || mc mb myminio/resume;
      "
    networks:
      - talentgate-api-net
    profiles:
      - dev
      - prod

  talentgate-api-traefik:
    container_name: talentgate-api-traefik
    image: traefik:3.5.0
    restart: always
    command:
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker.exposedbydefault=false"
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - talentgate-api-net
    profiles:
      - prod

  talentgate-api:
    build: .
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=PathPrefix(`/`)"
      - "traefik.http.routers.talentgate-api.entrypoints=web"
      - "traefik.http.services.talentgate-api.loadbalancer.server.port=80"
    networks:
      - talentgate-api-net
    profiles:
      - prod

volumes:
  postgres-data:
  pgadmin-data:
  redis-data:
  redisinsight_data:
  minio-data:

networks:
  talentgate-api-net:
    driver: bridge